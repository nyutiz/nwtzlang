with socket;
with gui;
with os;
with Car.nwtz;

obj Human{
    name: String,
    surname: String,
    age: int,
}

func main(String[] args){

    humans = Human[];

    server = new socket::server("localhost", 1234);

    server.start();

    human = new Human("Jerome", "Dupont", 75);

    humans.add(human);                                                      // ajoute human a humans par defaut mettre des index a chaque elements de la liste

    my_car = new Car("Tesla", "S", false);

    my_car.power();
    mark_name = my_car.get_mark();

    log(mark_name);

    log(args[0]);

    log("Second arg: {}", args[1]);

    if my_car.mark eq "Volvo" or my_car.started eq "false" and humans.len >= 2{
        // run condition
    }
    else if... {

    }
    else {

    }


    for (i, token) in tokens{
        log("Token : {}" + token.value + " at index : {}" + i);
    }

}


//Object File Car.nwtz
obj Car{
    mark: String,
    model: String,
    started: Bool,
}

impl Car{
    func power(){
        !started;
    }

    func String get_mark(){
        Self::mark
    }
}



########################## Syntaxes ##########################

// Import
with [Lib Name];
with [File];


// Print
log("");
log(Obj.var1);

log("Object : {}" + Obj.var2 + " and 1 {} 2{} " + Obj.var1 + Obj.var3);           // "Object : var2.value and 1var1.value 2 var3.value"
log("Object : {}" + Obj.var2 + " and 1 {} 2{} " + Obj.var1);                      // "Object : var2.valu and 1 var1.value 2 var1.value"


// Objects
obj [Name] {
    var1: String,
    var2: Object,
    var3: Integer
    var4: Float,
}
impl [Name] {}


// Functions (to return something dont put ';')
func [Return Type OR Nothing] [Name] ([Args]) {}


// Define a variable
[Var Name] =
             new Obj();
             "String text";
             45;
             5.5;


// Conditions
if ... and ...
if ... or ...
else if ...
else

// List / Tables
[Name] = Obj[];              // Liste of Obj
[Name].add(new Obj());

// Loop (Similar to rust)
for (i, token) in tokens{
    log("Token : {}" + token.value + " at index : {}" + i);
}

i = 0;
while (i <= 50){
    i++;
}